/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TempleOpeningCeremony,
  TempleOpeningCeremonyInterface,
} from "../TempleOpeningCeremony";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "dataOf",
    outputs: [
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "templar",
        type: "address",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
    ],
    name: "setData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610b2a8061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80634204f12a1461005c578063715018a6146100785780638da5cb5b14610082578063bb3d4562146100a0578063f2fde38b146100d1575b600080fd5b6100766004803603810190610071919061070e565b6100ed565b005b61008061021c565b005b61008a6102a4565b604051610097919061081b565b60405180910390f35b6100ba60048036038101906100b591906106e5565b6102cd565b6040516100c8929190610836565b60405180910390f35b6100eb60048036038101906100e691906106e5565b610401565b005b6100f56104f9565b73ffffffffffffffffffffffffffffffffffffffff166101136102a4565b73ffffffffffffffffffffffffffffffffffffffff1614610169576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101609061088d565b60405180910390fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190805190602001906101bf9291906105c5565b5080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010190805190602001906102169291906105c5565b50505050565b6102246104f9565b73ffffffffffffffffffffffffffffffffffffffff166102426102a4565b73ffffffffffffffffffffffffffffffffffffffff1614610298576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028f9061088d565b60405180910390fd5b6102a26000610501565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60016020528060005260406000206000915090508060000180546102f090610993565b80601f016020809104026020016040519081016040528092919081815260200182805461031c90610993565b80156103695780601f1061033e57610100808354040283529160200191610369565b820191906000526020600020905b81548152906001019060200180831161034c57829003601f168201915b50505050509080600101805461037e90610993565b80601f01602080910402602001604051908101604052809291908181526020018280546103aa90610993565b80156103f75780601f106103cc576101008083540402835291602001916103f7565b820191906000526020600020905b8154815290600101906020018083116103da57829003601f168201915b5050505050905082565b6104096104f9565b73ffffffffffffffffffffffffffffffffffffffff166104276102a4565b73ffffffffffffffffffffffffffffffffffffffff161461047d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104749061088d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e49061086d565b60405180910390fd5b6104f681610501565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546105d190610993565b90600052602060002090601f0160209004810192826105f3576000855561063a565b82601f1061060c57805160ff191683800117855561063a565b8280016001018555821561063a579182015b8281111561063957825182559160200191906001019061061e565b5b509050610647919061064b565b5090565b5b8082111561066457600081600090555060010161064c565b5090565b600061067b610676846108d2565b6108ad565b90508281526020810184848401111561069357600080fd5b61069e848285610951565b509392505050565b6000813590506106b581610add565b92915050565b600082601f8301126106cc57600080fd5b81356106dc848260208601610668565b91505092915050565b6000602082840312156106f757600080fd5b6000610705848285016106a6565b91505092915050565b60008060006060848603121561072357600080fd5b6000610731868287016106a6565b935050602084013567ffffffffffffffff81111561074e57600080fd5b61075a868287016106bb565b925050604084013567ffffffffffffffff81111561077757600080fd5b610783868287016106bb565b9150509250925092565b6107968161091f565b82525050565b60006107a782610903565b6107b1818561090e565b93506107c1818560208601610960565b6107ca81610a54565b840191505092915050565b60006107e260268361090e565b91506107ed82610a65565b604082019050919050565b600061080560208361090e565b915061081082610ab4565b602082019050919050565b6000602082019050610830600083018461078d565b92915050565b60006040820190508181036000830152610850818561079c565b90508181036020830152610864818461079c565b90509392505050565b60006020820190508181036000830152610886816107d5565b9050919050565b600060208201905081810360008301526108a6816107f8565b9050919050565b60006108b76108c8565b90506108c382826109c5565b919050565b6000604051905090565b600067ffffffffffffffff8211156108ed576108ec610a25565b5b6108f682610a54565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600061092a82610931565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b8381101561097e578082015181840152602081019050610963565b8381111561098d576000848401525b50505050565b600060028204905060018216806109ab57607f821691505b602082108114156109bf576109be6109f6565b5b50919050565b6109ce82610a54565b810181811067ffffffffffffffff821117156109ed576109ec610a25565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610ae68161091f565b8114610af157600080fd5b5056fea264697066735822122051d31c84454c8b3f102517583b3d8cdb977ea73ecb8b361359d41be2bd04c5fe64736f6c63430008040033";

export class TempleOpeningCeremony__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TempleOpeningCeremony> {
    return super.deploy(overrides || {}) as Promise<TempleOpeningCeremony>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TempleOpeningCeremony {
    return super.attach(address) as TempleOpeningCeremony;
  }
  connect(signer: Signer): TempleOpeningCeremony__factory {
    return super.connect(signer) as TempleOpeningCeremony__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TempleOpeningCeremonyInterface {
    return new utils.Interface(_abi) as TempleOpeningCeremonyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TempleOpeningCeremony {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TempleOpeningCeremony;
  }
}
